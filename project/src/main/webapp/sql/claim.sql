CREATE TABLE CLAIM ( -- 신고
    CLAIM_NUM INT PRIMARY KEY, -- 신고 번호 PK
    CLAIM_CATEGORY VARCHAR(20) NOT NULL CHECK(CLAIM_CATEGORY IN('욕설','성희롱','부적절컨텐츠')), -- 카테고리
    CLAIM_TEXT INT NOT NULL, -- 글, 댓글 FK
    CLAIM_TARGET_MEMBER_ID VARCHAR(50) NOT NULL, -- 신고 당한 유저 FK
    CLAIM_TYPE VARCHAR(100) NOT NULL CHECK(CLAIM_TYPE IN('댓글','게시글')), -- 신고 유형 
    CLAIM_STATUS VARCHAR(2) CHECK(CLAIM_STATUS IN('T', 'F')), -- 신고 처리 여부
    CLAIM_REPORTER_ID VARCHAR(50) NOT NULL, -- 신고자 FK
    UNIQUE (CLAIM_REPORTER_ID, CLAIM_TARGET_MEMBER_ID, CLAIM_CATEGORY) 
    -- 신고자가 특정 게시물/댓글에 대해 한 번만 신고할 수 있도록 보장
);
DROP TABLE CLAIM CASCADE CONSTRAINTS;

SELECT * FROM CLAIM;

-- 제약 조건
ALTER TABLE CLAIM 	-- 테이블 구조를 변경
ADD CONSTRAINT FK_CLAIM_TARGET_MEMBER_ID 	-- 제약조건 이름 FK_CLAIM_TARGET_MEMBER_ID
FOREIGN KEY (CLAIM_TARGET_MEMBER_ID)	 -- 테이블의 외래키 CLAIM_TARGET_MEMBER_ID
REFERENCES MEMBER (MEMBER_ID); 	-- MEMBER 테이블의 MEMBER_ID 컬럼 참조

-- 제약 조건
ALTER TABLE CLAIM -- 테이블 구조를 변경 
ADD CONSTRAINT FK_CLAIM_REPORTER_ID -- 제약조건 이름 FK_CLAIM_REPORTER_ID
FOREIGN KEY (CLAIM_REPORTER_ID) -- 테이블의 외래키 CLAIMREPORTER
REFERENCES MEMBER (MEMBER_ID); -- MEMBER 테이블의 MEMBER_ID 컬럼 참조

-- 제약 조건
ALTER TABLE CLAIM -- 테이블 구조를 변경
ADD CONSTRAINT FK_CLAIM_TEXT_BOARD -- 제약조건 이름 FK_CLAIM_TEXT_BOARD
FOREIGN KEY (CLAIM_TEXT) -- 테이블 외래키 CLAIM_TEXT
REFERENCES BOARD(BOARD_NUM); -- BOARD 테이블의 BOARD_NUM 컬럼 참조

-- 제약 조건
ALTER TABLE CLAIM -- 테이블 구조를 변경
ADD CONSTRAINT FK_CLAIM_TEXT_REPLY	-- 제약조건 이름 FK_CLAIM_TEXT_REPLY
FOREIGN KEY (CLAIM_TEXT) -- 테이블 외래키 CLAIM_TEXT
REFERENCES REPLY(REPLY_NUM); -- REPLY 테이블의 REPLY_NUM 컬럼 참조


-- 샘플데이터
-- 신고번호, 카테고리 , 글or댓글, 신고 당한 유저, 신고 유형, 신고처리 여부, 신고자
INSERT INTO CLAIM (CLAIM_NUM,CLAIM_CATEGORY,CLAIM_TEXT,CLAIM_TARGET_MEMBER_ID,CLAIM_TYPE,CLAIM_STATUS,CLAIM_REPORTER_ID) 
VALUES (NVL((SELECT MAX(CLAIM_NUM) FROM CLAIM),0)+1,'욕설',1,'MOOGUN@naver.com','게시글','T','wlsrja3852@naver.com');

INSERT INTO CLAIM (CLAIM_NUM,CLAIM_CATEGORY,CLAIM_TEXT,CLAIM_TARGET_MEMBER_ID,CLAIM_TYPE,CLAIM_STATUS,CLAIM_REPORTER_ID) 
VALUES (NVL((SELECT MAX(CLAIM_NUM) FROM CLAIM),0)+1,'욕설',1,'MOOGUN3852@naver.com','게시글','T','tlsektha3852@naver.com');
INSERT INTO CLAIM (CLAIM_NUM,CLAIM_CATEGORY,CLAIM_TEXT,CLAIM_TARGET_MEMBER_ID,CLAIM_TYPE,CLAIM_STATUS,CLAIM_REPORTER_ID) 
VALUES (NVL((SELECT MAX(CLAIM_NUM) FROM CLAIM),0)+1,'욕설',1,'MOOGUN3852@naver.com','댓글','T','MOOGUN@naver.com');
INSERT INTO CLAIM (CLAIM_NUM,CLAIM_CATEGORY,CLAIM_TEXT,CLAIM_TARGET_MEMBER_ID,CLAIM_TYPE,CLAIM_STATUS,CLAIM_REPORTER_ID) 
VALUES (NVL((SELECT MAX(CLAIM_NUM) FROM CLAIM),0)+1,'욕설',1,'MOOGUN3852@naver.com','게시글','T','wlsrja3852@naver.com');

-- 트리거 정의 확인
SELECT TRIGGER_NAME, STATUS
FROM USER_TRIGGERS
WHERE TRIGGER_NAME = 'CLAIM_TRIGGER';
-- 트리거 소스 코드 확인
SELECT TEXT
FROM USER_SOURCE
WHERE TYPE = 'TRIGGER' AND NAME = 'CLAIM_TRIGGER'
ORDER BY LINE;
-- 트리거 비활성화
ALTER TRIGGER CLAIM_TRIGGER DISABLE;
-- 트리거 활성화
ALTER TRIGGER CLAIM_TRIGGER ENABLE;
-- 트리거 확인을 위한 임시테이블
CREATE TABLE TEMP_CLAIM AS SELECT * FROM CLAIM WHERE 1=0;
SELECT * FROM TEMP_CLAIM;
-- 임시 테이블에 데이터 삽입
INSERT INTO CLAIM (CLAIM_NUM, CLAIM_CATEGORY, CLAIM_TEXT, CLAIM_TARGET_MEMBER_ID, CLAIM_TYPE, CLAIM_STATUS, CLAIM_REPORTER_ID)
VALUES (1, '욕설', 10, 'MOOGUN@naver.com', '게시글', 'T', 'MOOGUN3852@naver.com');
-- 데이터 확인
SELECT MEMBER_ID, MEMBER_ROLE FROM MEMBER WHERE MEMBER_ID = 'MOOGUN3852@naver.com';
-- 멤버 조인 후 멤버가 올린 글,댓글 을 조인해서
-- 신고 당한 게시글 보이기.
-- 신고 당한 유저의 글 번호

SELECT CLAIM_NUM FROM CLAIM WHERE CLAIM_NUM=1;
SELECT * FROM CLAIM

-- 트리거

-- 신고당한 유저(FK)가 10개가 되면 유저를 비활성화 상태로 돌림
-- INSERT 될떄마다 트리거에서 신고당한 유저의(FK)를 확인해서
-- 동일한 신고당한 유저(FK)가 10번이 되면 MEMBER_ROLE의 상태를 자동으로 비활성화로 바꾼다.
CREATE OR REPLACE TRIGGER CLAIM_TRIGGER
AFTER INSERT ON CLAIM
FOR EACH ROW
DECLARE
    REPORT_COUNT NUMBER;
BEGIN
    -- 신고당한 유저의 신고 횟수를 카운트
    SELECT COUNT(*)
    INTO REPORT_COUNT
    FROM CLAIM
    WHERE CLAIM_TARGET_MEMBER_ID = :NEW.CLAIM_TARGET_MEMBER_ID;
    -- 신고 횟수가 10회 이상일 경우
    IF REPORT_COUNT >= 10 THEN
        -- 유저를 비활성화
        UPDATE MEMBER
        SET MEMBER_ROLE = 'BANNED'
        WHERE MEMBER_ID = :NEW.CLAIM_TARGET_MEMBER_ID;
    END IF;
END;
/

-- 게시물, 댓글을 신고 수를(신고 당한 유저) 업데이트를 자동으로 해서
-- N번 일 경우  
/*
-- 신고 상태가 APPROVED로 업데이트될 때마다 신고 횟수를 카운드
-- 필요 시 회원의 상태 업데이트
CREATE OR REPLACE TRIGGER trg_update_member_status
AFTER UPDATE OF CLAIMSTATUS ON CLAIM
FOR EACH ROW
BEGIN
    IF :OLD.CLAIMSTATUS <> :NEW.CLAIMSTATUS AND :NEW.CLAIMSTATUS = 'APPROVED' THEN
        -- 신고가 승인된 경우
        UPDATE MEMBER
        SET STATUS = CASE 
                        WHEN (SELECT COUNT(*) 
                              FROM CLAIM 
                              WHERE CLAIMTARGETMEMBER = :NEW.CLAIMTARGETMEMBER 
                              AND CLAIMSTATUS = 'APPROVED') >= 20
                        THEN 'BANNED'
                        ELSE STATUS
                      END
        WHERE MID = :NEW.CLAIMTARGETMEMBER;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER trg_update_member_status
AFTER UPDATE OF CLAIMSTATUS ON CLAIM
FOR EACH ROW
BEGIN
    -- Ensure we are only updating when status changes to 'APPROVED'
    IF :OLD.CLAIMSTATUS <> :NEW.CLAIMSTATUS AND :NEW.CLAIMSTATUS = 'APPROVED' THEN
        -- Update member status if report count is 20 or more
        UPDATE MEMBER
        SET STATUS = 'BANNED'
        WHERE MID = :NEW.CLAIMTARGETMEMBER
          AND (SELECT COUNT(*)
               FROM CLAIM
               WHERE CLAIMTARGETMEMBER = :NEW.CLAIMTARGETMEMBER
                 AND CLAIMSTATUS = 'APPROVED') >= 20;
    END;
END;
/

CREATE OR REPLACE TRIGGER test_trigger
AFTER UPDATE ON CLAIM
FOR EACH ROW
BEGIN
    NULL;  -- No action, just a placeholder
END;
/
SELECT TRIGGER_NAME, STATUS
FROM USER_TRIGGERS
WHERE TRIGGER_NAME = 'TEST_TRIGGER';
*/

