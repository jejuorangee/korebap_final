CREATE TABLE PAYMENT( -- 결제
   PAYMENT_NUM INT PRIMARY KEY, -- 결제 번호 PK : C에서 UUID를 활용하여 조합한 번호, String
   PAYMENT_MEMBER_ID VARCHAR(255), -- 결제자 ID FK
   -- FK 제약조건 ON DELETE SET NULL 조건으로 인하여 NOT NULL 제약조건 삭제
   PAYMENT_PRODUCT_NUM INT, -- 상품 번호 FK
   -- FK 제약조건 ON DELETE SET NULL 조건으로 인하여 NOT NULL 제약조건 삭제
   PAYMENT_ORDER_NUM VARCHAR(50) NOT NULL, -- 주문 번호 (포트원에서 생성되는 번호)
   MERCHANT_UID VARCHAR(100) NOT NULL, -- C에서 사용하는 번호 (UUID + 시간 조합)
   PAYMENT_REGISTRATION_DATE DATE DEFAULT SYSDATE, -- 결제 날짜
   PAYMENT_PRICE INT NOT NULL, -- 결제 금액
   PAYMENT_STATUS VARCHAR(20) NOT NULL CHECK(PAYMENT_STATUS IN('결제완료','결제취소')), -- 결제 상태
   PAYMENT_METHOD VARCHAR(20) NOT NULL -- 결제 방법
);


-- 실무에서는 회원이 탈퇴를 해도 바로 데이터를 삭제하지 않음. 따라서 업데이트이고, DELETE가 없음. >> 회원 보관기간 3년~5년 정도 >> 이후에는 모든 데이터 삭제!
-- 방법 1) 지금처럼 NULL을 허용하고, FK 제약조건을 SET NULL
-- 방법 2) 임의의 데이터를 만들어서, '탈퇴한 회원' 임을 알려줌 >> 회원정보 삭제하지 않고 회원상태를 "탈퇴" 혹은 ID를 "탈퇴한 사용자" 로 UPDATE
-- >> 현재 방법 1번 사용 : 데이터 무결성이 깨지지만, 
-- 2번 방법을 사용하게 될 경우에는 회원 상태 / 관련 내역 모두 업데이트 해야하며 트랜잭션도 신경써야해 성능에 영향을 줄 수 있음


-- 컬럼 확인
SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_DEFAULT,NULLABLE
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME = 'PAYMENT';

SELECT PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_REGISTRATION_DATE,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD FROM PAYMENT WHERE PAYMENT_NUM = 1;

-- 테이블 삭제
DROP TABLE PAYMENT CASCADE CONSTRAINT;
-- 테이블 전체 조회
SELECT * FROM PAYMENT;


-- 샘플
INSERT INTO PAYMENT VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'tlsektha3852@naver.com',2,'123','a012','2024-09-01',90000,'결제완료','card');
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'wlsrja3852@naver.com',4,124,'a0123',30000,'결제완료','card');
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'tlsektha3852@naver.com',6,126,'a0134',10000,'결제완료','card');
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'tlsektha3852@naver.com',6,126,'a0187',10000,'결제완료','card');
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'abc@naver.com',6,127,'v4562',10000,'결제완료','card');
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'aaa@naver.com',5,128,'e12556',10000,'결제완료','card');
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,'zhddl@naver.com',5,128,'e12556',10000,'결제완료','card');


-- FK제약조건 (멤버)
ALTER TABLE PAYMENT --PAYMENT 테이블 변경
ADD CONSTRAINT FK_PAYMENT_MEMBER_ID -- 제약조건 추가할거야
FOREIGN KEY (PAYMENT_MEMBER_ID) -- FK키는 PAYMENT_MEMBER_ID
REFERENCES MEMBER(MEMBER_ID) -- FK는 MEMBER테이블의 MEMBER_ID에 의존하고 있어
ON DELETE SET NULL; -- 회원이 탈퇴해도 결제 내역은 남겨둠. 회원 정보만 NULL로 바뀜 (추후 관리자 기능에 필요..!!)

-- FK제약조건 (상품)
ALTER TABLE PAYMENT--PAYMENT 테이블 변경
ADD CONSTRAINT FK_PRODUCT_PRODUCT_NUM -- FK 제약조건 추가
FOREIGN KEY (PAYMENT_PRODUCT_NUM) --PAYMENT_PRODUCT_NUM
REFERENCES PRODUCT(PRODUCT_NUM) -- PRODUCT 테이블의 PRODUCT_NUM이야
ON DELETE SET NULL; -- 상품이 삭제돼도, 결제 내역은 남아있고 / 상품 정보만 NULL 처리됨



-- 결제 생성
INSERT INTO PAYMENT (PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD)
VALUES(COALESCE((SELECT MAX(PAYMENT_NUM) FROM PAYMENT),0)+1,?,?,?,?,?,?,?);



-- 결제 내용(결제상태) 변경 (결제취소)
UPDATE PAYMENT SET PAYMENT_STATUS =? WHERE MERCHANT_UID=?;


-- selectOne
-- 결제 요청 -> 결제 진행 -> 결제 테이블에 저장
-- 결제 api로 포트원에서 불러온 결제 내역이랑 + 결제할때 금액과 비교 == 같으면 예약으로 넘어감 == 틀리면 결제 취소
-- 그럼 예약은 없는 상태, MERCHANT_UID 으로 찾아서, 나머지 컬럼들 다 전달해주면 됨!!
SELECT PAYMENT_NUM,PAYMENT_MEMBER_ID,PAYMENT_PRODUCT_NUM,PAYMENT_ORDER_NUM,MERCHANT_UID,PAYMENT_REGISTRATION_DATE,PAYMENT_PRICE,PAYMENT_STATUS,PAYMENT_METHOD
FROM PAYMENT
WHERE MERCHANT_UID=?;


