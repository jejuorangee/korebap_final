CREATE TABLE BOARD( -- 게시판
	BOARD_NUM INT PRIMARY KEY, -- 번호 PK
	BOARD_TITLE VARCHAR(2000) NOT NULL, -- 제목
	BOARD_CONTENT VARCHAR(2000), -- 내용
	BOARD_WRITER_ID VARCHAR(255) NOT NULL, -- 작성자 FK 
	BOARD_REGISTRATION_DATE DATE DEFAULT SYSDATE -- 작성 날짜
);

-- ** 게시판 전체 조회 VEIW 생성 ** 
-- SELECTALL의 기능들의 쿼리가 기능마다 동일하게 반복되고, JOIN 또한 반복되어 복잡해지므로 쿼리 재사용 위해 가상의 테이블인 VIEW 생성
-- 쿼리를 단순화시켜 쿼리 최적화를 돕고, 가독성과 재사용성을 높이기 위해 사용
-- 검색에 사용하기 위해 SELECT절에 BOARD_CONTENT 추가함
CREATE VIEW BOARD_INFO_VIEW AS
SELECT 
    B.BOARD_NUM, 
    B.BOARD_TITLE, 
    B.BOARD_CONTENT, 
    B.BOARD_REGISTRATION_DATE, 
    (SELECT COUNT(G.LIKE_BOARD_NUM) 
     FROM GOODLIKE G 
     WHERE G.LIKE_BOARD_NUM = B.BOARD_NUM) AS LIKE_COUNT,
    I.FILE_NAME, 
    I.FILE_EXTENSION, 
    I.FILE_DIR
FROM 
    BOARD B
LEFT JOIN (
    SELECT 
        FILE_NAME, 
        FILE_EXTENSION, 
        FILE_DIR, 
        BOARD_ITEM_NUM,
        ROW_NUMBER() OVER(PARTITION BY BOARD_ITEM_NUM ORDER BY FILE_NUM) AS RN
    FROM 
        IMAGEFILE 
) I ON B.BOARD_NUM = I.BOARD_ITEM_NUM AND I.RN = 1;

DROP VIEW BOARD_INFO_VIEW;

CREATE VIEW BOARD_INFO_VIEW AS
SELECT B.BOARD_NUM, B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_REGISTRATION_DATE, (SELECT COUNT(G.LIKE_BOARD_NUM) FROM GOODLIKE G WHERE G.LIKE_BOARD_NUM=B.BOARD_NUM) AS LIKE_COUNT, I.FILE_NAME, I.FILE_EXTENSION, I.FILE_DIR
FROM BOARD B
LEFT JOIN (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, BOARD_ITEM_NUM FROM (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM, ROW_NUMBER() OVER(PARTITION BY ITEM_NUM ORDER BY FILE_NUM)AS RN FROM IMAGEFILE WHERE FILE_CONTENT_TYPE='글')WHERE RN=1)I 
ON B.BOARD_NUM = I.ITEM_NUM;


GRANT INSERT, UPDATE, DELETE, SELECT ON BOARD TO DUEDATE;
GRANT CREATE VIEW TO DUEDATE;
SELECT * FROM USER_SYS_PRIVS WHERE PRIVILEGE = 'CREATE VIEW';
GRANT CREATE VIEW TO DUEDATE;


-- 테이블 제약조건까지 삭제
DROP TABLE BOARD CASCADE CONSTRAINT;
-- 전체 출력
SELECT * FROM BOARD;

--컬럼 타입 변경
ALTER TABLE BOARD
MODIFY BOARD_WRITER_ID VARCHAR(255);

-- 컬럼 확인
SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH, DATA_DEFAULT
FROM USER_TAB_COLUMNS
WHERE TABLE_NAME = 'BOARD';



-- 샘플 데이터
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '안녕하세요','ㅎㅇ','123@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '낚시했어요','방어잡았음','tlsektha3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '안녕?','커피 필요해','wlsrja3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '마라탕탕','후루루루루','tlsektha3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '도다리회','먹고 싶어요','tlsektha3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '물고기 잡아라','참치 잡고 싶어요','wlsrja3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '물고기ㅇㅇ 잡아라','참치 잡고ㅇㅇ 싶어요','wlsrja3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '가을이 왔음 좋겠다','여름 싫어','tlsektha3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '낚시터 추천','ㅈㄱㄴ','tlsektha3852@naver.com',SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '곧 가을이네용','여름 저리가라!','tlsektha3852@naver.com');

INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, '안녕하세요','ㅎㅇ','MOOGUN@naver.com',SYSDATE);


-- FK 제약조건 추가 (글 작성자)
ALTER TABLE BOARD -- BOARD 테이블 변경
ADD CONSTRAINT FK_BOARD_WRITER_ID -- FK 제약조건을 추가
FOREIGN KEY (BOARD_WRITER_ID) -- BOARDWRITER가 FK
REFERENCES MEMBER(MEMBER_ID) --그 FK 값은 MEMBER테이블의 MID에서 가져온다.
ON DELETE CASCADE; -- 원본 데이터(회원탈퇴시) 사라지면 연결 데이터(글) 사라짐

SELECT BOARD_WRITER_ID 
FROM BOARD 
WHERE BOARD_WRITER_ID NOT IN (SELECT MEMBER_ID FROM MEMBER);


-- 게시글 작성 (INSERT)
-- BOARDNUM의 경우 PK값이므로 사용자가 임의변경 할 수 없음
-- 따라서 MAX 값을 찾아 +1을 해주는데, 값이 NULL일 수 있으니 COALESCE 사용하여 MAX값이 NULL일 경우 0으로 바꿔준다.
--INSERT INTO BOARD VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1,?,?,?,SYSDATE);
--INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID,BOARD_REGISTRATION_DATE) VALUES(NVL((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, ?,?,?,SYSDATE);
INSERT INTO BOARD (BOARD_NUM,BOARD_TITLE,BOARD_CONTENT,BOARD_WRITER_ID) VALUES(COALESCE((SELECT MAX(BOARD_NUM) FROM BOARD), 0) + 1, ?,?,?);


-- 게시글 수정 (UPDATE)
-- 게시글 제목과 내용을 한번에 바꿈
UPDATE BOARD SET BOARD_TITLE=COALESCE(?,BOARD_TITLE), BOARD_CONTENT=COALESCE(?,BOARD_CONTENT) WHERE BOARD_NUM=?;


-- 게시글 삭제 (DELETE)
DELETE FROM BOARD WHERE BOARD_NUM=?;

-- VIEW 삭제
DROP VIEW BOARD_INFO_VIEW;



-- 전체 출력 통합
SELECT BOARD_NUM, BOARD_TITLE, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR
FROM (
    SELECT BOARD_NUM, BOARD_TITLE, BOARD_CONTENT, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR,
           ROW_NUMBER() OVER (
               ORDER BY 
               CASE WHEN ? IS NOT NULL AND ? = 'like' THEN LIKE_COUNT 
                   ELSE BOARD_NUM 
               END DESC
           ) AS ROW_NUM
    FROM BOARD_INFO_VIEW
    WHERE (? IS NULL OR BOARD_TITLE LIKE '%'||?||'%' OR BOARD_CONTENT LIKE '%'||?||'%')
)
WHERE ROW_NUM BETWEEN (COALESCE(?,1)-1)*9+1 AND COALESCE(?,1)*9;


-- CASE WHEN 조건1 THEN 결과1 ELSE 다 아닌 경우
-- IS NULL : NULL 일때 true
-- IS NOT NULL : NULL이 아닐 때 true를 반환


-- 1. 게시판 전체 출력 (SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 좋아요 수_서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
-- 최신 글이 위로 오도록 글 번호 내림차순 (글 번호는 1부터 순서대로 ++ 이기 때문)
SELECT BOARD_NUM, BOARD_TITLE, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR 
FROM (SELECT BOARD_NUM, BOARD_TITLE, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR,
			ROW_NUMBER() OVER(ORDER BY BOARD_NUM DESC) AS ROW_NUM
			FROM BOARD_INFO_VIEW)
WHERE ROW_NUM BETWEEN (COALESCE(?,1)-1)*9+1 AND COALESCE(?,1)*9;



-- 2. 글 제목 / 내용으로 출력 (SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 좋아요 수_서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
-- 최신 글이 위로 오도록 글 번호 내림차순 (글 번호는 1부터 순서대로 ++ 이기 때문)
SELECT BOARD_NUM, BOARD_TITLE, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR 
FROM (SELECT BOARD_NUM, BOARD_TITLE,BOARD_CONTENT, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR,
			ROW_NUMBER() OVER(ORDER BY BOARD_NUM DESC) AS ROW_NUM
			FROM BOARD_INFO_VIEW
			WHERE BOARD_TITLE LIKE '%'||?||'%' OR BOARD_CONTENT LIKE '%'||?||'%')
WHERE ROW_NUM BETWEEN (COALESCE(NULL,1)-1)*9+1 AND COALESCE(NULL,1)*9;



-- 3. 좋아요 순으로 출력 (SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
SELECT BOARD_NUM, BOARD_TITLE, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR
FROM(SELECT BOARD_NUM, BOARD_TITLE, BOARD_REGISTRATION_DATE, LIKE_COUNT, FILE_NAME, FILE_EXTENSION, FILE_DIR,
			ROW_NUMBER() OVER(ORDER BY LIKE_COUNT DESC) AS ROW_NUM
			FROM BOARD_INFO_VIEW)
WHERE ROW_NUM BETWEEN (COALESCE(?,1)-1)*9+1 AND COALESCE(?,1)*9;





-- 내가 쓴 글 전체 보기(SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 / 글 작성자 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 좋아요 수_서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
-- MEMBER 테이블의 닉네임 데이터를 가져오기 위해 JOIN 사용
-- MEMBER 테이블 JOIN으로 인해 해당 기능 VIEW에 추가하게 되면 다른 크롤링 데이터 조회 x, 전체 출력 중 이 기능만 VIEW 사용 X
SELECT MB.BOARD_NUM, MB.BOARD_TITLE, MB.BOARD_REGISTRATION_DATE, MB.MEMBER_NICKNAME,MB.LIKE_COUNT, MB.FILE_NAME, MB.FILE_EXTENSION, MB.FILE_DIR
FROM (SELECT B.BOARD_NUM, B.BOARD_TITLE, B.BOARD_REGISTRATION_DATE, M.MEMBER_NICKNAME, (SELECT COUNT(G.LIKE_BOARD_NUM) FROM GOODLIKE G WHERE G.LIKE_BOARD_NUM=B.BOARD_NUM) AS LIKE_COUNT, I.FILE_NAME, I.FILE_EXTENSION, I.FILE_DIR,
ROW_NUMBER() OVER(ORDER BY BOARD_NUM DESC) AS ROW_NUM
FROM BOARD B
JOIN MEMBER M ON B.BOARD_WRITER_ID = M.MEMBER_ID
LEFT JOIN (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM FROM (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM, ROW_NUMBER() OVER(PARTITION BY ITEM_NUM ORDER BY FILE_NUM)AS RN FROM IMAGEFILE WHERE FILE_CONTENT_TYPE='글')WHERE RN=1)I ON B.BOARD_NUM = I.ITEM_NUM
WHERE B.BOARD_WRITER_ID = ?)MB
WHERE ROW_NUM BETWEEN (COALESCE(?,1)-1)*9+1 AND COALESCE(?,1)*9; 




-- 글 상세페이지 출력 (SELECTONE)
-- 글 출력
-- : 글 번호 / 글 제목/글 내용/글 작성일/*작성자 ID/*작성자 닉네임(M)/*작성자 레벨(멤버가 작성한 글 COUNT)/*좋아요 수(G) 
SELECT B.BOARD_NUM, B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_REGISTRATION_DATE, COALESCE(B.BOARD_WRITER_ID,'탈퇴한 회원입니다') AS MEMBER_ID, COALESCE(M.MEMBER_NICKNAME, '탈퇴한 회원입니다.') AS MEMBER_NICKNAME, COALESCE(ML.LV_COUNT,1) AS MEMBER_LEVEL,
(SELECT COUNT(LIKE_BOARD_NUM) FROM GOODLIKE G WHERE G.LIKE_BOARD_NUM=B.BOARD_NUM) AS LIKE_COUNT
FROM BOARD B
LEFT JOIN MEMBER M ON B.BOARD_WRITER_ID = M.MEMBER_ID
LEFT JOIN (SELECT B2.BOARD_WRITER_ID,COUNT(B2.BOARD_WRITER_ID) AS LV_COUNT FROM BOARD B2 GROUP BY B2.BOARD_WRITER_ID)ML ON M.MEMBER_ID=ML.BOARD_WRITER_ID
WHERE B.BOARD_NUM=?;


-- 가장 최근 게시글 번호 받아오기 (selectOne)
-- 파일 테이블 업로드시 필요 : 파일 테이블에서 보낼 수 있는 글 번호가 없음
-- 업로드 하면서 가장 최근 글 번호를 찾아 함께 반영해줌
-- 서브쿼리를 사용해서 게시글 내림차순으로 정렬하고, ROWNUM(가상의 번호를 설정해줌)을 이용해서 1개의 값을 반환한다.
SELECT BOARD_NUM FROM (SELECT BOARD_NUM FROM BOARD ORDER BY BOARD_NUM DESC) WHERE ROWNUM=1;


-- 전체 데이터 수 반환 (selectOne) 페이지네이션에 사용하기 위함 >> 동적쿼리 사용
-- [전체 페이지 수 출력 - 기본]
SELECT CEIL(COALESCE(COUNT(BOARD_NUM),0)/9.0)AS BOARD_TOTAL_PAGE FROM BOARD WHERE 1=1;
-- 아래는 AND ~ 쿼리문 사용 
-- [키워드 검색 페이지 수 출력]
SELECT CEIL(COALESCE(COUNT(BOARD_NUM),0)/9.0)AS BOARD_TOTAL_PAGE FROM BOARD WHERE 1=1
AND BOARD_TITLE LIKE '%'||?||'%' OR BOARD_CONTENT LIKE '%'||?||'%';
-- [내가 쓴 글 전체보기]
SELECT CEIL(COALESCE(COUNT(BOARD_NUM),0)/9.0)AS BOARD_TOTAL_PAGE FROM BOARD WHERE 1=1
AND BOARD_WRITER_ID = ?;



/*
 24.09.18 selectAll 기능 쿼리가 동일한 내용/JOIN이 반복되고 있어서 VIEW 테이블 생성으로 쿼리 변경

-- 게시판 전체 출력 (SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 좋아요 수_서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
-- 최신 글이 위로 오도록 글 번호 내림차순 (글 번호는 1부터 순서대로 ++ 이기 때문)
SELECT B.BOARD_NUM, B.BOARD_TITLE, B.BOARD_REGISTRATION_DATE, (SELECT COUNT(G.LIKE_BOARD_NUM) FROM GOODLIKE G WHERE G.LIKE_BOARD_NUM=B.BOARD_NUM) AS LIKE_COUNT, I.FILE_NAME, I.FILE_EXTENSION, I.FILE_DIR
FROM BOARD B 
LEFT JOIN (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM FROM (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM, ROW_NUMBER() OVER(PARTITION BY ITEM_NUM ORDER BY FILE_NUM)AS RN FROM IMAGEFILE WHERE FILE_CONTENT_TYPE='글')WHERE RN=1)I ON B.BOARD_NUM = I.ITEM_NUM
ORDER BY BOARD_NUM DESC;



-- 글 제목 / 내용으로 출력 (SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 좋아요 수_서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
-- 최신 글이 위로 오도록 글 번호 내림차순 (글 번호는 1부터 순서대로 ++ 이기 때문)
SELECT B.BOARD_NUM, B.BOARD_TITLE, B.BOARD_REGISTRATION_DATE, (SELECT COUNT(G.LIKE_BOARD_NUM) FROM GOODLIKE G WHERE G.LIKE_BOARD_NUM=B.BOARD_NUM) AS LIKE_COUNT, I.FILE_NAME, I.FILE_EXTENSION, I.FILE_DIR
FROM BOARD B 
LEFT JOIN (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM FROM (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM, ROW_NUMBER() OVER(PARTITION BY ITEM_NUM ORDER BY FILE_NUM)AS RN FROM IMAGEFILE WHERE FILE_CONTENT_TYPE='글')WHERE RN=1)I ON B.BOARD_NUM = I.ITEM_NUM
WHERE B.BOARD_TITLE LIKE '%'||?||'%' OR B.BOARD_CONTENT LIKE '%'||?||'%'
ORDER BY BOARD_NUM DESC;



-- 좋아요 순으로 출력 (SELECTALL)
-- : 글 번호 / 글 제목 / 글 작성일 /*좋아요 수(G) / *파일명 / *파일 확장자 / *파일 경로
-- 서브쿼리 : 좋아요 받은 글 번호와 게시글 번호가 같다면 좋아요 받은 글 수카운트
SELECT B.BOARD_NUM, B.BOARD_TITLE, B.BOARD_REGISTRATION_DATE, (SELECT COUNT(G.LIKE_BOARD_NUM) FROM GOODLIKE G WHERE G.LIKE_BOARD_NUM=B.BOARD_NUM) AS LIKE_COUNT, I.FILE_NAME, I.FILE_EXTENSION, I.FILE_DIR
FROM BOARD B 
LEFT JOIN (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM FROM (SELECT FILE_NAME, FILE_EXTENSION, FILE_DIR, ITEM_NUM, ROW_NUMBER() OVER(PARTITION BY ITEM_NUM ORDER BY FILE_NUM)AS RN FROM IMAGEFILE WHERE FILE_CONTENT_TYPE='글')WHERE RN=1)I ON B.BOARD_NUM = I.ITEM_NUM
ORDER BY LIKE_COUNT DESC;
*/
